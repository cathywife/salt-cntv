input {
  kafka {
    consumer_id => 'logstash-consumer-{{ grains["id"] }}'
    group_id => 'logstash-syslog'
    consumer_threads => 2
    topic_id => 'logstash-topic-syslog'
    codec => 'json'
    queue_size => 200
    #consumer_timeout_ms => 10000
    #consumer_restart_sleep_ms => 5000
    zk_connect => '10.64.0.1:2181,10.64.0.2:2181,10.64.0.3:2181'
  }
}

filter {
  #ruby {
  #  code => "event['@logtime'] = Time.parse(event['@timestamp'].to_s).strftime('%Y-%m-%d %H:%M:%S.%L')"
  #}
  mutate {
    add_field => { "fromAgent" => "kafka-{{ grains["id"] }}" }
  }
  if [type] == "openLdapSyslog" {
    grok {
      patterns_dir => "/etc/logstash/grok-patterns"
      match => { "message" => "%{openLdapSyslog}" }
      tag_on_failure => ["msg_grokFail"]
    }
  }
  if [type] == "mySyslog" {
    grok {
      patterns_dir => "/etc/logstash/grok-patterns"
      match => { "message" => "%{mySyslog}" }
      tag_on_failure => ["msg_grokFail"]
    }
    syslog_pri { }
    mutate {
      remove_field => [ "syslog_pri", "syslog_facility", "syslog_facility_code" ]
    }
    if [syslog_program] == "audit.hist" {
      grok {
        patterns_dir => "/etc/logstash/grok-patterns"
        match => { "syslog_message" => "%{myAuditlog}" }
        tag_on_failure => ["msg_grokFail"]
        add_tag => ["_auditLog"]
      }
      mutate {
        replace => [ "type", "mySyslog-auditLog" ]
      }
    }
  }
  if [type] == "saltLog" {
    grok {
      patterns_dir => "/etc/logstash/grok-patterns"
      match => { "message" => "%{saltLog}" }
      tag_on_failure => ["msg_grokFail"]
    }
  }
  if [syslog_program] =~ /sshd|su/ and [syslog_hostip] =~ /10.72.0.186|10.72.0.188|10.72.2.22|10.72.0.22|10.64.1.83|10.64.1.87|10.64.1.89|10.64.5.92|10.80.2.14|10.80.2.15|192.168.95.42|192.168.91.67|10.88.4.76|10.88.6.29|10.88.6.30|10.88.4.81|10.64.0.113|10.64.4.212|10.64.4.213|10.64.4.215|10.80.4.71|10.80.4.72|10.80.4.68|10.80.4.69|10.88.4.102|10.88.4.16|10.88.6.22|10.88.6.23|10.72.5.37|10.72.5.38|10.80.6.96|10.80.6.95|10.88.6.44|192.168.61.68|10.64.0.11|10.64.0.12|10.64.1.76|10.64.1.77|10.64.4.199|10.64.4.200|10.64.4.216|10.64.4.217|10.64.4.218|10.64.4.219|10.64.0.143|10.64.0.144|192.168.112.84|192.168.112.85|10.72.2.183|10.72.2.184|10.72.2.185|10.72.2.186|10.72.2.187/ {
    if [syslog_message] =~ /.*(Failed|authentication failure)/ {
      mutate { add_tag => [tmsSecureFailed] }
    }
  }
  if [syslog_program] =~ /sshd|su/ and [syslog_hostip] =~ /10.64.2.196|10.64.2.197|10.64.2.198|10.64.2.199|10.64.2.200|10.64.2.201|10.64.2.202|10.64.4.223|10.64.4.224|10.64.4.225|10.64.4.226|10.64.4.94|10.64.2.170|10.64.0.107|10.64.4.163|10.64.4.164|10.64.4.222|10.64.2.203|10.64.2.204|10.64.2.205|10.64.2.206|10.80.2.23|10.80.2.24|10.80.2.25|10.80.2.26|10.80.2.27|10.80.2.28|10.80.0.40|10.80.0.50|10.80.0.34|10.80.0.39|10.80.0.47|10.80.0.49|10.80.2.29|10.80.2.30|10.80.2.31|10.80.4.27|10.80.0.31|10.80.0.32|10.80.0.33|10.80.0.42|10.72.0.23|10.72.0.24|10.72.0.25|10.72.0.26|10.72.0.27|10.72.0.144|10.72.0.145|10.72.0.146|10.72.0.147|10.72.0.153|10.72.0.154|10.72.0.155|10.72.0.156|10.72.0.30|10.72.0.31|10.72.0.32|10.72.0.215|10.72.0.216|10.72.0.217|10.72.0.157|10.72.0.158|10.88.6.33|10.88.6.103|10.88.6.104|10.88.6.105|10.88.6.106|192.168.61.79|10.88.2.21|10.88.2.22|10.88.6.34|10.88.6.107|10.88.6.108|10.88.6.109|10.88.6.110|10.88.4.77|10.88.4.78|10.88.4.57|10.88.2.19/ {
    if [syslog_message] =~ /.*(Failed|authentication failure)/ {
      mutate { add_tag => [ImgPageSourceSecureFailed] }
    }
  }
  if [syslog_program] =~ /sshd|su/ and [syslog_hostip] =~ /10.64.2.141|10.7.3.216|10.7.3.218|10.7.3.220|10.7.3.225|10.64.2.67|10.64.2.79|10.70.56.62|10.70.56.63|10.70.56.64|10.70.56.65|10.70.2.1|10.70.2.2|10.70.62.46|10.7.3.222|10.7.3.224|10.7.3.234|10.7.3.235|10.7.3.236|10.7.3.237|10.7.3.240|10.70.33.75|10.70.33.76|10.70.33.77|10.70.33.78|10.70.33.79|10.70.33.80|10.70.36.136|10.70.36.137|10.70.36.138|10.70.36.139|10.70.36.140|10.70.36.141|10.70.36.143|10.70.36.144|10.70.36.145|10.70.36.146|10.70.36.147|10.70.36.148|10.70.36.149|10.70.36.150|10.70.36.151|10.70.36.152|10.70.36.153|10.70.36.154|10.70.36.155|10.70.36.156|10.70.58.143|10.70.58.144|10.70.58.145/ {
    if [syslog_message] =~ /.*(Failed|authentication failure)/ {
      mutate { add_tag => [cboxSecureFailed] }
    }
    if [syslog_message] =~ /.*(Accepted|session opened for)/ {
      mutate { add_tag => [cboxSecureAccept] }
    }
  }
}

output {
  if [tags] == "ImgPageSourceSecureFailed" {
    exec {
      command => "echo '%{timestamp} %{syslog_hostip}: %{syslog_program} %{syslog_message}' |mutt -s 'syslogAlert-ImgPageSourceSecureFailed' idc.system@staff.cntv.cn songrunpeng@staff.cntv.cn limingxiao@cntv.cn xinming@ctvit.com.cn"
      #command => "curl -d 'to=idc.system@staff.cntv.cn,songrunpeng@staff.cntv.cn,limingxiao@cntv.cn,xinming@ctvit.com.cn&subject=ImgPageSourceSecureFailed@syslogWatch&body=%{timestamp} %{syslog_hostip}: %{syslog_program} %{syslog_message}' 'http://10.64.12.49:8011/vcsApi/notify.php'"
    }
  }
  if [tags] == "tmsSecureFailed" {
    exec {
      command => "echo '%{timestamp} %{syslog_hostip}: %{syslog_program} %{syslog_message}' |mutt -s 'syslogAlert-tmsSecureFailed' idc.system@staff.cntv.cn songrunpeng@staff.cntv.cn limingxiao@cntv.cn penghao@ctvit.com.cn"
    }
  }
  if [tags] == "cboxSecureFailed" {
    exec {
      command => "echo '%{timestamp} %{syslog_hostip}: %{syslog_program} %{syslog_message}' |mutt -s 'syslogAlert-cboxSecureFailed' idc.system@staff.cntv.cn songrunpeng@staff.cntv.cn limingxiao@cntv.cn duanjunhui@staff.cntv.cn liyibiao@staff.cntv.cn"
    }
  }
  if [tags] == "cboxSecureAccept" {
    exec {
      command => "echo '%{timestamp} %{syslog_hostip}: %{syslog_program} %{syslog_message}' |mutt -s 'syslogAlert-cboxSecureAccept' idc.system@staff.cntv.cn songrunpeng@staff.cntv.cn limingxiao@cntv.cn duanjunhui@staff.cntv.cn liyibiao@staff.cntv.cn"
    }
  }
  if [type] == "mySyslog-auditLog" {
    elasticsearch {
      host => ["10.64.0.1:9200","10.64.0.2:9200","10.64.0.3:9200"]
      port => 9200
      protocol => "http"
      index => "logstash-syslog-auditlog-%{+YYYY.MM}"
      flush_size => 500
      idle_flush_time => 1
      workers => 2
    }
  }
  else {
    elasticsearch {
      host => ["10.64.0.1:9200","10.64.0.2:9200","10.64.0.3:9200"]
      port => 9200
      protocol => "http"
      flush_size => 10000
      idle_flush_time => 5
      workers => 8
      #template => "/etc/logstash/logstashTemplate.json"
      #template_overwrite => true
    }
    #stdout { codec => rubydebug }
  }
}